mage.cards.decks.importer.DckDeckImporter#readLine(Ljava/lang/String;Lmage/cards/decks/DeckCardLists;Lmage/cards/decks/importer/DeckImporter$FixedInfo;)V
java.util.ArrayList#<init>()V
mage.cards.decks.CardNameUtil#normalizeCardName(Ljava/lang/String;)Ljava/lang/String;
java.util.regex.Pattern#matcher(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;
java.lang.String#replace(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;
java.lang.StringBuilder#append(Ljava/lang/String;)Ljava/lang/StringBuilder;
mage.cards.decks.DeckCardLayout#<init>(Ljava/util/List;Ljava/lang/String;)V
java.lang.StringBuilder#append(I)Ljava/lang/StringBuilder;
mage.cards.repository.CardRepository#findPreferredCoreExpansionCard(Ljava/lang/String;Ljava/lang/String;)Lmage/cards/repository/CardInfo;
java.util.ArrayList#instance-init#
java.util.regex.Matcher#matches()Z
java.util.regex.Matcher#find()Z
mage.cards.repository.CardRepository#findCard(Ljava/lang/String;Ljava/lang/String;Z)Lmage/cards/repository/CardInfo;
mage.cards.decks.DeckCardInfo#instance-init#
mage.cards.decks.DeckCardLayout#instance-init#
mage.cards.decks.DeckCardInfo#<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
java.lang.String#substring(I)Ljava/lang/String;
java.lang.Integer#parseInt(Ljava/lang/String;)I
java.lang.String#equals(Ljava/lang/Object;)Z
java.lang.String#isEmpty()Z
java.lang.String#contains(Ljava/lang/CharSequence;)Z
java.lang.StringBuilder#append(C)Ljava/lang/StringBuilder;
java.util.regex.Matcher#group(I)Ljava/lang/String;
java.lang.String#trim()Ljava/lang/String;
java.lang.String#startsWith(Ljava/lang/String;)Z