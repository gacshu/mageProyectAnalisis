mage.game.match.MatchOptions#toProto()Lmage/game/result/ResultProtos$MatchOptionsProto;
mage.game.result.ResultProtos$MatchOptionsProto$Builder#setRated(Z)Lmage/game/result/ResultProtos$MatchOptionsProto$Builder;
mage.game.result.ResultProtos$MatchOptionsProto$Builder#setWinsNeeded(I)Lmage/game/result/ResultProtos$MatchOptionsProto$Builder;
mage.game.result.ResultProtos$MatchOptionsProto$Builder#setLimited(Z)Lmage/game/result/ResultProtos$MatchOptionsProto$Builder;
mage.game.result.ResultProtos$MatchOptionsProto$Builder#setSkillLevel(Lmage/game/result/ResultProtos$SkillLevel;)Lmage/game/result/ResultProtos$MatchOptionsProto$Builder;
mage.game.result.ResultProtos$MatchOptionsProto$Builder#build()Lmage/game/result/ResultProtos$MatchOptionsProto;
mage.game.result.ResultProtos$MatchOptionsProto$Builder#setName(Ljava/lang/String;)Lmage/game/result/ResultProtos$MatchOptionsProto$Builder;
mage.game.result.ResultProtos$MatchOptionsProto#newBuilder()Lmage/game/result/ResultProtos$MatchOptionsProto$Builder;
==
isRated mage.game.match.MatchOptions#isRated()Z
getWinsNeeded mage.game.match.MatchOptions#getWinsNeeded()I
getName mage.game.match.MatchOptions#getName()Ljava/lang/String;
isLimited mage.game.match.MatchOptions#isLimited()Z
getSkillLevel mage.game.match.MatchOptions#getSkillLevel()Lmage/constants/SkillLevel;